Hey everybody, welcome to tutorial 27. This video's gonna be a little different than usualâ€”I'm gonna show you how you can help contribute to the development of SuperCollider using git and github.

Full disclosure, for all the SuperCollider users out there who are primarily programmers dabbling in music, or if you're a regular github user, there's a good chance this video won't teach you anything new. I'm imagining this tutorial is much more useful for users who are primarily musicians dabbling in programming. And if the idea of helping to develop SuperCollider seems overwhelming, remember that development contributions come in many different forms. It doesn't necessarily mean a deep dive into C++, or fixing elusive bugs, rather, it might be as simple as fixing a type in one of the help files, or maybe refining a code example in the documentation that isn't quite as clear or instructive as perhaps it could be. These are examples of bite-size helpful changes you can propose, that don't require an extensive programming background. And as for why you should consider helping with development, it's my opinion that having more active users making good faith contributions, means SuperCollider becomes more robust, more user-friendly, and has better prospects for longevity. So remember, no contribution is too small, and every little bit helps.

If you're not familiar with git and github, you're not alone, because I'm a relatively new user myself. In fact, to prepare for this video, I sat down with one of the SuperCollider developers, Brian Heim, and he very graciously walked me through the process from start to finish. So, big thank you to Brian for the help, and I'm very pleased to be able to pass his knowledege on to you, in hopes that you'll put it to good use.

Out of necessity, this tutorial was developed with macOS in mind, but I'm cautiously optimistic that most if not all concepts can be easily extrapolated and applied to other operating systems.

The first step is to identify some kind of contribution you'd like to make. So before making this video, I rummaged through a lot of the help files, and noticed that in the guide file titled 'Glossary,' in the entry for server, the word "see" accidentally appears twice in a row in the last sentence. So, let's fix it.

In this video we're going to be working at the command line a fair amount, so find your operating system's command line interface, and open it up. On macOS, this is called Terminal, located in your Applications folder...and the Utilities subfolder. If you've never used the command line before, think of it as a text-based interface for using your computer, harder-to-learn than the graphical interface you're accustomed to, with the mouse and folder icons and all that, but much more powerful.

Next, make sure you have Git installed. In short, Git is version control software that helps track changes during the process of software development, it's free and open source. To see if you've already got git installed, type git version and hit enter. If you see a version number, you're good to go. If git is not installed, this action may trigger an installation prompt that you can follow, or alternatively, you can go to git-scm.com/downloads and follow the instructions there.

In addition, you'll also need a github account, which is also free. GitHub is a website that integrates with Git and allows people from all over the world to collaborate on software development projcets. Once you've created an account, log in. The SuperCollider github account is here, at github.com/supercollider, and the main supercollider code repository, or "repo" for short, is here at github.com/supercollider/supercollider.

In terms of the big picture, what you're gonna do is make a copy of this repo for yourself, edit that copy locally, on your personal machine, and then request to have your changes merged into the main SuperCollider project.

So, the next step is to decide where to store this local copy of the SuperCollider project. Doesn't really matter where it goes, as long as you're aware of where you're putting it. I'm gonna go to my home folder, then into Documents, and make a new folder called GitHub. And then, at the command line, navigate into this folder. We do this which a change directory command, which is 'cd'. So, cd, space, and then the absolute path to this folder. If you're not sure what that is, a quick option is to just click and drag the folder into the command line, and hit enter. If you like, you can follow this up with a pwd command, which is 'print working directory'. This is not a necessary step, but it's a good command to be familiar with, useful for confirming your current location within a hierarchy of folders.

Back on github, we're gonna make a copy of the supercollider repo for ourselves, and this is called forking. On the supercollider repo page, click the button in the upper right that says fork. This'll take a few seconds, and when it's done, github should automatically take you to your page for the fork you just created. For me, that is github.com/elifieldsteel/supercollider.

So we've got a copy of the repo on our github page, now we need to make yet another copy that resides locally, on your computer. This is called cloning, and at the command line, the command for this action is git ...space... clone ...space... the URL to the fork you just created...we'll copy and paste this from your browser ... then one more space and 'dash dash recursive', and this last bit ensures that all of the submodules in the supercollider repo get cloned as well. Hit enter, this process should take a about a minute or so, so just hang out while it works. I'm gonna fast forward here...once it's done, you'll be able to find the local clone, in whatever folder you chose as your working directory.

Back at the command line, cd supercollider forward slash to navigate into the repo itself, and now, sort of a technical step, we want to manage the remote repos on github that this local repo is tracking, so that it stays up-to-date with other developments. So first, the command git remote dash-v, and you should see something like this, which means the local repo is tracking your personal fork as a remote. What you want to do, is add the *original* repo as a second remote, and we do this with git remote add upstream ...and then the URL to the main supercollider repo, you can type it in or just copy and paste from the browser.

Now git remote -v once again, and we can confirm that we've successfully added the main repo as a remote.

With that step completed, the next sensible thing to do is update your fork. Now, if this is your first time doing all of this, forking, cloning, etc, then this next step is probably not necessary, since you've *just* now forked, and your copy is almost certainly up-to-date. Updating your fork is a much more important thing to do if, for example, you forked a year ago and haven't touched it since then, in which case, probably, a lot of changes have happened since then and your fork is out of date. No matter the case, updating your fork is a good thing to know how to do, and it goes like this:

git fetch upstream
(which downloads everything from the upstream remote)

git checkout develop
(this makes sure we're on the correct branch of the project, and develop is the name of the default branch for the main repo)

and then
git pull upstream develop
(which brings your develop branch up-to-date with the main repo's develop branch)

I want use this moment to point out that on the main repo page, there's a wiki, and at the bottom of that wiki, a bunch of links, one of which is titled Creating Pull Requests. And this page contains a lot of the same information I'm covering here, like forking, cloning, keeping things up-to-date, etc.

We're almost ready to correct that typo, but if we run git branch we can see that we're currently on the develop branch, and this is not where we want to be for making a simple typo correction, so just a quick discussion about branches--on the main repo page on github, 'develop' is the default branch of the project. conceptually, 'develop' is the branch where all of the primary, substantial things take place for improving, evolving the platform, creating the next stable release of supercollider, but if all changes took place on this one branch, big, medium, and small, then it'd just be a big mess, and just not a very clean way of working. So the accepted practice is to create a new branch, specifically for your contribution. And in fact, if you scroll down on this list of branches, you can see that there are already several topic branches, dedicated for individual purposes.

So, back at the command line we create a new branch with git...checkout...dash-b, and then the name of the branch we're creating, so this needs to be a single string without spaces, and by convention encouraged by the supercollider developers, this shuold start with topic/ followed by some short but meaningful descriptor of why this branch is going to exist. so i'll say topic slash glossary dash typo...and hit enter.

Run git branch again, and you can see we've created a new branch, and switched onto it.

Alright, time to fix that typo. Somehow, we've got to locate the relevant file or files in the local repo, in my case, the Glossary guide document. That...could take awhile if we just mindlessly poke around, so one thing you can do is go back to the project wiki, and go to the link for Project Structure  at the bottom, this gives an hierarchical overview of where project assets are located, so the HelpSource directory contains all the help docs, and alternatively, since we're editing a help document, we could view to that document in the SuperCollider IDE, scroll all the way to the bottom, and there's a path that contains info on the location of this file. So we can see it should be in HelpSource/Guides. So let's track it down...here it is...and we just want to open this in some text editor, really any text editor is fine, you could even do this using SuperCollider. So, make the change, and save the file.

At the command line, run git status, and this confirms that we have in fact made changes to our branch, specifically to the Glossary dot schelp file. So the first step is to add this change to the staging area, which we do with git...add...and then we could just put the local path to the file we changed, so that would be HelpSource slash Guides slash Glossary dot schelp, but that's a lot to type, and you can imagine this could be really tedious if your contribution involves multiple files, so instead we can take advantage of the fact that add is recursive by default, so we can simply add a parent folder, like HelpSource, or even simpler, git add ... period, and this adds any changes within the entire working directory, in other words the entire local repo.

Git status again, and that change is now green, which means it is staged for inclusion in the next commit. After we're done adding changes, we're ready to commit those changes, essentially a commit is like saving a snapshot of the the state of the repo at a point in time. So that command is git... commit...dash-m to add a commit message, and then the commit message itself, in quotes, and similar to the branch name, this should be a short, meaningful message that describes the nature of this commit. Specifically, Brian recommends the following convention: the broad project component, so in thi scase that would be docs (or maybe helpdocs, or helpsource, something like that), colon, and then a short descriptor phrase as if it were a simple computer command, so i'd go with fix glossary typo.

Run that, and then git status... confirms we've got no more changes to commit.

From here, we want to push this new branch to our personal fork on github, so that this new branch is visible there as well, we do that with git ... push... --set-upstream origin, which means the local clone will track changes in your remote fork, and then the name of the branch, which is topic/glossary-typo

Run this, which takes a few seconds...and once it's done, go back to your fork on github, and you should be able to see confirmation of your recent push, right at the top. Usually this happens pretty quick but in some cases it might take a minute or so to show up.

The final step is to make a pull request, which essentially means asking the SC developers to incorporate your changes into the develop branch, so that your contributions will be reflected in the next release. Click this green button that says 'compare and pull request', and complete the form on this page, in particular, the purpose and motivation of the pull request. In this case it's just a simple typo, so something brief is fine, though I imagine for more substantial contributions you might want to put some detailed information here. For types of changes, delete the lines that aren't applicable. This is strictly a documentation change, and not any of these things. And then check off the to-do list by putting a lowercase x in each set of brackets. So, we've updated documentation, and this pull request is ready for review, and even though this change doesn't involve any code testing, Brian recommends checking off items that don't apply, just to show that, you know, all tests are passing because...there's no code to be tested.

Preview your PR if you like, and if it looks good, click on create pull request. This completes the process of initiating a pull request, so from hree, at some point a developer will come along and review your pull request, now that might be a couple minutes, but more realistically probably a day or two at least. But you can come back to this PR page whenever you like, and it'll give you live status updates, including tags, comments, and whether the PR was approved or not. I'm gonna jump forward in time here, just to show you that this PR was approved.

And that's all there is to it. As a reminder, the wiki page for the supercollider repo page is a good source of information for making contributions and otherwise interacting with the SC community. I know we usually talk about signal processing and UGens and all that, and this tutorial topic is a bit far from the usual path, but nonetheless I hope you find it useful, so the next time you come across something in SuperCollider that looks like it could be fixed or improved, I hope you'll consider making that change yourself, and contributing to the supercollider community. Thanks for watching, and I will see you next time.